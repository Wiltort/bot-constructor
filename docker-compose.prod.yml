services:
  web:
    build: .
    ports:
      - "8000:8000"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 50s
    environment:
      - DEBUG=0
      - FIELD_ENCRYPTION_KEY=${FIELD_ENCRYPTION_KEY}
      - DJANGO_SETTINGS_MODULE=bot_constructor.settings
      - REDIS_URL=redis://redis:6379/0
      - DB_NAME=${DB_NAME:-bots_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - DB_HOST=db
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  celery:
    build: .
    command: celery -A bot_constructor worker -l info -Q bot_operations
    networks:
      - app-network
    volumes:
      - ./src:/app/src
    environment:
      - DEBUG=0
      - PYTHONPATH=/app/src
      - FIELD_ENCRYPTION_KEY=${FIELD_ENCRYPTION_KEY}
      - DJANGO_SETTINGS_MODULE=src.bot_constructor.settings
      - REDIS_URL=redis://redis:6379/0
      - DB_NAME=${DB_NAME:-bots_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - DB_HOST=db
    depends_on:
      - web
      - redis
      - db
    restart: unless-stopped

  celery-beat:
    build: .
    command: celery -A bot_constructor beat -l info
    networks:
      - app-network
    volumes:
      - ./src:/app/src
    environment:
      - DEBUG=0
      - PYTHONPATH=/app/src
      - FIELD_ENCRYPTION_KEY=${FIELD_ENCRYPTION_KEY}
      - DJANGO_SETTINGS_MODULE=src.bot_constructor.settings
      - REDIS_URL=redis://redis:6379/0
      - DB_NAME=${DB_NAME:-bots_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - DB_HOST=db
    depends_on:
      - web
      - redis
      - db
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:15
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - POSTGRES_DB=${DB_NAME:-bots_db}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-bots_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  redis_data:
  postgres_data:

networks:
  app-network:
    driver: bridge