# Generated by Django 5.2.4 on 2025-08-03 08:35

import django.db.models.deletion
import encrypted_model_fields.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Scenario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100, verbose_name="название")),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scenarios",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="пользователь",
                    ),
                ),
            ],
            options={
                "verbose_name": "сценарий",
                "verbose_name_plural": "сценарии",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=250, verbose_name="название")),
                (
                    "scenario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="states",
                        to="bots.scenario",
                        verbose_name="сценарий",
                    ),
                ),
            ],
            options={
                "verbose_name": "состояние",
                "verbose_name_plural": "состояния",
            },
        ),
        migrations.AddField(
            model_name="scenario",
            name="default_state",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="default_on",
                to="bots.state",
            ),
        ),
        migrations.CreateModel(
            name="Step",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100, verbose_name="название")),
                (
                    "template",
                    models.CharField(
                        choices=[
                            ("ST", "start"),
                            ("CL", "clear history"),
                            ("CC", "custom command"),
                            ("CH", "choose button"),
                            ("CT", "cathegory"),
                            ("OP", "call operator"),
                            ("QU", "question"),
                            ("IN", "input data"),
                        ],
                        default="CC",
                        max_length=2,
                        verbose_name="шаблон",
                    ),
                ),
                (
                    "extra_context",
                    models.JSONField(
                        blank=True, null=True, verbose_name="дополнительный контекст"
                    ),
                ),
                (
                    "on_state",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="step",
                        to="bots.state",
                        verbose_name="состояние",
                    ),
                ),
                (
                    "scenario",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="step",
                        to="bots.scenario",
                        verbose_name="сценарий",
                    ),
                ),
            ],
            options={
                "verbose_name": "шаг",
                "verbose_name_plural": "шаги",
            },
        ),
        migrations.CreateModel(
            name="Bot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="имя")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="описание"),
                ),
                (
                    "gpt_api_key",
                    encrypted_model_fields.fields.EncryptedCharField(
                        verbose_name="API ключ"
                    ),
                ),
                (
                    "gpt_api_url",
                    models.CharField(
                        choices=[
                            ("https://api.deepseek.com", "deepseek"),
                            ("https://api.openai.com", "openai"),
                        ],
                        default="https://api.deepseek.com",
                        max_length=200,
                        verbose_name="API GPT URL",
                    ),
                ),
                (
                    "telegram_token",
                    encrypted_model_fields.fields.EncryptedCharField(
                        blank=True, null=True, verbose_name="телеграм токен"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="изменен"),
                ),
                ("is_active", models.BooleanField(default=False)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="владелец",
                    ),
                ),
                (
                    "current_scenario",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="bots",
                        to="bots.scenario",
                        verbose_name="текущий сценарий",
                    ),
                ),
            ],
            options={
                "verbose_name": "бот",
                "verbose_name_plural": "боты",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("owner", "name"), name="unique_name_per_owner"
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="state",
            constraint=models.UniqueConstraint(
                fields=("scenario", "title"), name="unique_state_per_scenario"
            ),
        ),
        migrations.AddConstraint(
            model_name="scenario",
            constraint=models.UniqueConstraint(
                fields=("owner", "title"), name="unique_scenario_per_owner"
            ),
        ),
        migrations.AddConstraint(
            model_name="step",
            constraint=models.UniqueConstraint(
                fields=("scenario", "title"), name="unique_step_per_scenario"
            ),
        ),
    ]
